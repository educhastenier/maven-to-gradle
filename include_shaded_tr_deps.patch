From 672a1ee1b478e347fc2ec7b4b2f0aebf886789c9 Mon Sep 17 00:00:00 2001
From: Baptiste Mesta <baptiste.mesta@gmail.com>
Date: Fri, 14 Sep 2018 14:16:22 +0200
Subject: [PATCH] add transitive dependencies of shaded external dep in pom

---
 .../groovy/org/bonitasoft/engine/gradle/ShadePlugin.groovy | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/ShadePlugin.groovy b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/ShadePlugin.groovy
index 0aa1c1d954..e71f036ec2 100644
--- a/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/ShadePlugin.groovy
+++ b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/ShadePlugin.groovy
@@ -234,7 +234,7 @@ class ShadePlugin implements Plugin<Project> {
                     // do not add it: project is shaded inside this project
                     allDependencies.addAll(getPomDependencies(projectDependency, extension, allProjectsAlreadyShaded, false))
                 }
-            } else if (!extension.includes.contains(new ShadeDependency(group: it.moduleGroup, name: it.moduleName))) {
+            } else {
                 // also add transitive dependencies of third-party libs:
                 allDependencies.addAll(getTransitiveThirdPartyDependencies(it, "", project, extension))
             }
@@ -249,7 +249,10 @@ class ShadePlugin implements Plugin<Project> {
     private Set<ResolvedDependency> getTransitiveThirdPartyDependencies(ResolvedDependency current, String indent, Project project, ShadeExtension extension) {
         def res = [] as Set
         project.logger.debug(" Shade POM generation: adding ${indent}${current.name}")
-        res.add(current)
+        // if the external dependency is shaded, do not add it in the pom, but add its dependencies
+        if(!extension.includes.contains(new ShadeDependency(group: current.moduleGroup, name: current.moduleName))){
+            res.add(current)
+        }
         def thirdPartyExclusion = extension.libExclusions.get(current.moduleName)
         current.getChildren().forEach { child ->
             if (!thirdPartyExclusion || !thirdPartyExclusion.contains(new ShadeDependency(group: child.moduleGroup, name: child.moduleName))) {
-- 
2.18.0

