From 3b236b38989a003b05c6d96b8cc4eb21a11e26dc Mon Sep 17 00:00:00 2001
From: Emmanuel Duchastenier <emmanuel.duchastenier@bonitasoft.com>
Date: Tue, 24 Jul 2018 15:28:03 +0200
Subject: [PATCH] gradle(DB tests): add capability to run tests on all
 supported DB vendors

---
 Jenkinsfile                                   |  11 +-
 build.gradle                                  |  12 +-
 buildSrc/build.gradle                         |   4 +-
 .../build.gradle                              |   7 +
 community/build.gradle                        |   2 +-
 community/buildSrc/build.gradle               |   6 +-
 .../docker/DatabasePluginExtension.groovy     |  35 ++++
 .../engine/gradle/docker/DbParser.groovy      |  80 ++++++++
 ...DockerDatabaseContainerTasksCreator.groovy | 189 ++++++++++++++++++
 .../gradle/docker/DockerDatabasePlugin.groovy |  38 ++++
 .../docker/JdbcDriverDependencies.groovy      |  24 +++
 .../bonita-business-data-impl/build.gradle    |  15 ++
 gradle.properties                             |   2 +-
 .../com/bonitasoft/engine/NodeLauncher.java   |   1 +
 .../build.gradle                              |   7 +-
 15 files changed, 411 insertions(+), 22 deletions(-)
 create mode 100644 community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DatabasePluginExtension.groovy
 create mode 100644 community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DbParser.groovy
 create mode 100644 community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DockerDatabaseContainerTasksCreator.groovy
 create mode 100644 community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DockerDatabasePlugin.groovy
 create mode 100644 community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/JdbcDriverDependencies.groovy

diff --git a/Jenkinsfile b/Jenkinsfile
index 06cb5772d5..7b2ad941ed 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -1,24 +1,17 @@
 #!/usr/bin/env groovy
 import static groovy.json.JsonOutput.toJson
 
-def mvn(args) {
-    // the -B flag disables download progress logs
-    sh "./mvnw -B ${args}"
-}
-
 timestamps {
     ansiColor('xterm') {
         node {
-            def currentBranch = env.BRANCH_NAME
-            def isMasterOrDev = currentBranch == 'master' || currentBranch == 'dev'
 
             stage('Setup') {
                 checkout scm
             }
 
             try {
-                 stage('Build and Test') {
-                     sh './gradlew build iT -Dorg.gradle.jvmargs="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
+                slackStage('Build and Test') {
+                    sh './gradlew build iT --stacktrace'
                  }
             } finally {
                 junit '**/build/test-results/**/*.xml'
diff --git a/build.gradle b/build.gradle
index 608eb4f0f2..4039abc9ac 100644
--- a/build.gradle
+++ b/build.gradle
@@ -37,12 +37,9 @@ subprojects { sub ->
   
   repositories {
     mavenLocal()
-    
-    maven { url "http://repositories.rd.lan/maven/releases/" }
-    maven { url "http://repositories.rd.lan/maven/snapshots/" }
-    maven { url "http://repositories.rd.lan/maven/maintenance.snapshots/" }
-    maven { url "http://repo.maven.apache.org/maven2" }
-    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
+    maven { url "http://repositories.rd.lan/maven/all/" }
+    jcenter()
+    mavenCentral()
   }
 
   afterEvaluate {
@@ -56,7 +53,7 @@ subprojects { sub ->
       }
       systemProperty "project.dir", sub.projectDir.getAbsolutePath()
       systemProperty "bonita.version", version
-      if (testTask.name == "integrationTest" || testTask.name == "slowtest") {
+      if (testTask.name == "integrationTest" || testTask.name == "slowtest" || testTask.name.endsWith('DatabaseTest')) {
         def property = project.property('org.gradle.jvmargs')
         if(property){
           jvmArgs property.toString().split(" ")
@@ -75,7 +72,6 @@ subprojects { sub ->
     }
   }
 
-  
 }
 apply plugin: 'maven-publish'
 
diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle
index e4c7d207f0..d3acddc4c3 100644
--- a/buildSrc/build.gradle
+++ b/buildSrc/build.gradle
@@ -4,7 +4,9 @@ dependencies {
 
 allprojects {
     repositories {
-        mavenLocal()
+        maven { url 'http://repositories.rd.lan/maven/all' }
+        // fallback solution in case the Bonitasoft internal repository is not available
         jcenter()
+        mavenCentral()
     }
 }
\ No newline at end of file
diff --git a/community/bonita-integration-tests/bonita-integration-tests-local/build.gradle b/community/bonita-integration-tests/bonita-integration-tests-local/build.gradle
index 658e3c3094..f554a97efd 100644
--- a/community/bonita-integration-tests/bonita-integration-tests-local/build.gradle
+++ b/community/bonita-integration-tests/bonita-integration-tests-local/build.gradle
@@ -1,5 +1,8 @@
+apply plugin: 'bonita-docker-database'
+
 group = 'org.bonitasoft.engine.test'
 description = ''
+
 dependencies {
     compile group: 'junit', name: 'junit', version: '4.12'
     compile group: 'org.assertj', name: 'assertj-core', version: '3.7.0'
@@ -30,3 +33,7 @@ task slowTest(type: Test) {
     include 'org/bonitasoft/engine/SlowExecutionLocalIntegrationTests.class'
     systemProperty "bonita.version", project.version
 }
+
+databaseIntegrationTest {
+    include 'org/bonitasoft/engine/LocalIntegrationTests.class'
+}
diff --git a/community/build.gradle b/community/build.gradle
index 5ac71efd89..b82f39ba98 100644
--- a/community/build.gradle
+++ b/community/build.gradle
@@ -117,7 +117,7 @@ from sourceSets.main.allSource
               }
               systemProperty "project.dir", sub.projectDir.getAbsolutePath()
               systemProperty "bonita.version", version
-              if (testTask.name == "integrationTest" || testTask.name == "slowtest") {
+              if (testTask.name == "integrationTest" || testTask.name == "slowtest" || testTask.name.endsWith('DatabaseTest')) {
                   def property = project.property('org.gradle.jvmargs')
                   if(property){
                       jvmArgs property.toString().split(" ")
diff --git a/community/buildSrc/build.gradle b/community/buildSrc/build.gradle
index 030213f655..877936880a 100644
--- a/community/buildSrc/build.gradle
+++ b/community/buildSrc/build.gradle
@@ -8,14 +8,18 @@ repositories {
 
 dependencies {
     compile "com.github.jengelman.gradle.plugins:shadow:2.0.4"
+    compile 'com.bmuschko:gradle-docker-plugin:3.2.8'
 }
 
-
 gradlePlugin {
     plugins {
         bonitaShade {
             id = "bonita-shade"
             implementationClass = "org.bonitasoft.engine.gradle.ShadePlugin"
         }
+        bonitaDatabaseTest {
+            id = "bonita-docker-database"
+            implementationClass = "org.bonitasoft.engine.gradle.docker.DockerDatabasePlugin"
+        }
     }
 }
\ No newline at end of file
diff --git a/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DatabasePluginExtension.groovy b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DatabasePluginExtension.groovy
new file mode 100644
index 0000000000..dc0865b791
--- /dev/null
+++ b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DatabasePluginExtension.groovy
@@ -0,0 +1,35 @@
+/**
+ * Copyright (C) 2015 Bonitasoft S.A.
+ * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble
+ * This library is free software; you can redistribute it and/or modify it under the terms
+ * of the GNU Lesser General Public License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU Lesser General Public License for more details.
+ * You should have received a copy of the GNU Lesser General Public License along with this
+ * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
+ * Floor, Boston, MA 02110-1301, USA.
+ **/
+package org.bonitasoft.engine.gradle.docker
+
+/**
+ * @author Baptiste Mesta
+ */
+class DatabasePluginExtension {
+
+    List<String> includes
+
+    def includes(String... includes) {
+        this.includes = []
+        this.includes.addAll(includes)
+    }
+
+    def include(String include) {
+        if (this.includes == null) {
+            this.includes = []
+        }
+        this.includes.add(include)
+    }
+
+}
diff --git a/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DbParser.groovy b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DbParser.groovy
new file mode 100644
index 0000000000..0396cc87ce
--- /dev/null
+++ b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DbParser.groovy
@@ -0,0 +1,80 @@
+/**
+ * Copyright (C) 2018 Bonitasoft S.A.
+ * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble
+ * This library is free software; you can redistribute it and/or modify it under the terms
+ * of the GNU Lesser General Public License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU Lesser General Public License for more details.
+ * You should have received a copy of the GNU Lesser General Public License along with this
+ * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
+ * Floor, Boston, MA 02110-1301, USA.
+ **/
+package org.bonitasoft.engine.gradle.docker
+
+import groovy.transform.EqualsAndHashCode
+import groovy.transform.ToString
+
+class DbParser {
+
+    static DbConnectionSettings extractDbConnectionSettings(String dburl) {
+        if (dburl.contains("sqlserver")) {
+            return extractSqlServerDbConnectionSettings(dburl)
+        }
+        else if (dburl.contains("oracle")) {
+            return extractOracleDbConnectionSettings(dburl)
+        }
+        return extractGenericDbConnectionSettings(dburl)
+    }
+
+    private static DbConnectionSettings extractGenericDbConnectionSettings(String dburl) {
+        DbConnectionSettings settings = new DbConnectionSettings()
+        settings.dbUrl = dburl
+
+        def parsedUrl = (dburl =~ /(jdbc:\w+:\/\/)([\w\d\.-]+):(\d+)\/([\w\-_\d]+).*/)
+        settings.serverName = parsedUrl[0][2]
+        settings.portNumber = parsedUrl[0][3]
+        settings.databaseName = parsedUrl[0][4]
+        settings.genericUrl = parsedUrl[0][1] + settings.serverName + ":" + settings.portNumber + "/"
+
+        settings
+    }
+
+    private static DbConnectionSettings extractOracleDbConnectionSettings(String dburl) {
+        DbConnectionSettings settings = new DbConnectionSettings()
+        settings.dbUrl = dburl
+
+        def parsedUrl = (dburl =~ /(jdbc:.*:@)([\w\d\.-]+):(\d+)\/([\w\-_\d]+).*/)
+        settings.serverName = parsedUrl[0][2]
+        settings.portNumber = parsedUrl[0][3]
+        settings.databaseName = parsedUrl[0][4]
+        settings.genericUrl = dburl
+
+        settings
+    }
+
+    private static DbConnectionSettings extractSqlServerDbConnectionSettings(String dburl) {
+        DbConnectionSettings settings = new DbConnectionSettings()
+        settings.dbUrl = dburl
+
+        def parsedUrl = (dburl =~ /(jdbc:\w+:\/\/)([\w\d\.-]+):(\d+);database=([\w\-_\d]+).*/)
+        settings.serverName = parsedUrl[0][2]
+        settings.portNumber = parsedUrl[0][3]
+        settings.databaseName = parsedUrl[0][4]
+        settings.genericUrl = parsedUrl[0][1] + settings.serverName + ":" + settings.portNumber
+
+        settings
+    }
+
+    @ToString
+    @EqualsAndHashCode
+    static class DbConnectionSettings {
+        String dbUrl
+        String serverName
+        String portNumber
+        String databaseName
+        String genericUrl
+    }
+
+}
diff --git a/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DockerDatabaseContainerTasksCreator.groovy b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DockerDatabaseContainerTasksCreator.groovy
new file mode 100644
index 0000000000..bf3315943d
--- /dev/null
+++ b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DockerDatabaseContainerTasksCreator.groovy
@@ -0,0 +1,189 @@
+package org.bonitasoft.engine.gradle.docker
+
+import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
+import com.bmuschko.gradle.docker.tasks.container.DockerInspectContainer
+import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
+import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
+import com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer
+import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
+import org.gradle.api.Project
+import org.gradle.api.Task
+import org.gradle.api.tasks.testing.Test
+/**
+ * Gradle plugin to start docker database containers and performed tests with them
+ */
+class DockerDatabaseContainerTasksCreator {
+
+    def static vendors = [
+            [name           : 'oracle',
+             repository     : 'registry.rd.lan/bonitasoft/oracle-11g',
+             tag            : '1.2.0',
+             portBinding    : 1521,
+             uriTemplate    : 'jdbc:oracle:thin:@%s:%s/xe',
+             dockerSupported: true
+            ],
+            [name           : 'postgres',
+             repository     : 'registry.rd.lan/bonitasoft/postgres-9.3',
+             tag            : '1.2.3',
+             portBinding    : 5432,
+             uriTemplate    : 'jdbc:postgresql://%s:%s/bonita',
+             databaseName   : 'bonita',
+             dockerSupported: true
+            ],
+            [name           : 'mysql',
+             repository     : 'registry.rd.lan/bonitasoft/mysql-5.5.49',
+             tag            : '1.1.1',
+             portBinding    : 3306,
+             uriTemplate    : 'jdbc:mysql://%s:%s/bonita?allowMultiQueries=true',
+             dockerSupported: true
+            ],
+            [name           : 'sqlserver',
+             dockerSupported: false
+            ]
+    ]
+
+    private static String getDockerHost() {
+        def dockerHost = System.getenv('DOCKER_HOST')
+        if (dockerHost?.trim()) {
+            return new URI(dockerHost).host
+        }
+        return 'localhost'
+    }
+
+    private static final String SYS_PROP_DB_URL = 'db.url'
+    private static final String SYS_PROP_DB_USER = 'db.user'
+    private static final String SYS_PROP_DB_PASSWORD = 'db.password'
+    private static final String SYS_PROP_DB_NAME = 'db.database.name'
+
+    def static createTasks(Project project, DatabasePluginExtension extension) {
+        // required to have the environment correctly setup: see https://github.com/bmuschko/gradle-docker-plugin/issues/575#issuecomment-383704012
+        project.plugins.apply('com.bmuschko.docker-remote-api')
+        vendors.each { vendor ->
+            def uniqueName = "${vendor.name.capitalize()}"
+
+            DbParser.DbConnectionSettings dbConnectionSettings = new DbParser.DbConnectionSettings()
+            Task inspectContainer
+            Task removeContainer
+
+            if (vendor.dockerSupported) {
+                def pullImage = project.tasks.create("pull${uniqueName}Image", DockerPullImage) {
+                    description "Pull docker image for $uniqueName db vendor"
+                    group null // do not show task when running `gradle tasks`
+
+                    repository = vendor.repository
+                    tag = vendor.tag
+                }
+
+                def createContainer = project.tasks.create("create${uniqueName}Container", DockerCreateContainer) {
+                    description "Create a docker container for $uniqueName db vendor"
+                    group null // do not show task when running `gradle tasks`
+
+                    dependsOn pullImage
+                    portBindings = [":$vendor.portBinding"]
+                    targetImageId { pullImage.getImageId() }
+                    if (vendor.name == 'oracle') {
+                        // 1Go
+                        shmSize = 1099511627776
+                    }
+                }
+
+                def startContainer = project.tasks.create("start${uniqueName}Container", DockerStartContainer) {
+                    description "Start a docker container for $uniqueName db vendor"
+                    group "docker"
+
+                    dependsOn createContainer
+                    targetContainerId { createContainer.getContainerId() }
+                }
+
+                def waitForContainerStartup = project.tasks.create("waitFor${uniqueName}ContainerStartup", DockerWaitHealthyContainer) {
+                    description "Wait for a started docker container for $vendor.name db vendor to be healthy"
+                    group null // do not show task when running `gradle tasks`
+
+                    dependsOn startContainer
+                    targetContainerId { startContainer.getContainerId() }
+                    timeout = 240
+                }
+
+                inspectContainer = project.tasks.create("inspect${uniqueName}ContainerUrl", DockerInspectContainer) {
+                    description "Get url of a docker container for $uniqueName db vendor"
+                    group null // do not show task when running `gradle tasks`
+
+                    dependsOn waitForContainerStartup
+                    targetContainerId { startContainer.getContainerId() }
+
+                    onNext {
+                        it.networkSettings.ports.getBindings().each { exposedPort, bindingArr ->
+                            if (exposedPort.port == vendor.portBinding) {
+                                int portBinding = bindingArr.first().hostPortSpec as int
+                                def dockerHost = getDockerHost()
+                                def url = String.format(vendor.uriTemplate, dockerHost, portBinding)
+                                project.logger.info "Container url: ${url}"
+                                dbConnectionSettings.dbUrl = url
+                                dbConnectionSettings.serverName = dockerHost
+                                dbConnectionSettings.portNumber = portBinding
+                                project.logger.quiet("db.url set to ${dbConnectionSettings.dbUrl}")
+                            }
+                        }
+                    }
+                }
+
+                removeContainer = project.tasks.create("remove${uniqueName}Container", DockerRemoveContainer) {
+                    description "Remove a docker container for $uniqueName db vendor"
+                    group "docker"
+
+                    force = true
+                    removeVolumes = true
+                    targetContainerId { createContainer.getContainerId() }
+                }
+
+            } else if (vendor.name == 'sqlserver') {
+                String sqlServerUrl = System.getProperty(SYS_PROP_DB_URL, "jdbc:sqlserver://sqlserver2.rd.lan:1533;database=${System.getProperty(SYS_PROP_DB_NAME)}")
+                dbConnectionSettings = new DbParser().extractDbConnectionSettings(sqlServerUrl)
+            }
+
+            Test databaseTestTask = project.tasks.create("${vendor.name}DatabaseTest", Test.class) {
+                group "Verification"
+                description "Run integration test suite on database $vendor.name"
+                systemProperty "bonita.version", project.version
+                classpath += project.files(project.configurations.drivers)
+
+                doFirst {
+                    String dbUrl = project.hasProperty(SYS_PROP_DB_URL) ? project.property(SYS_PROP_DB_URL) : dbConnectionSettings.dbUrl
+                    def connectionSettings = DbParser.extractDbConnectionSettings(dbUrl)
+                    def dbValues = [
+                            "sysprop.bonita.db.vendor"    : vendor.name,
+                            "sysprop.bonita.bdm.db.vendor": vendor.name,
+                            "db.url"                      : dbUrl,
+                            "db.user"                     : project.hasProperty('db.user') ? project.property(SYS_PROP_DB_URL) : (System.getProperty(SYS_PROP_DB_USER) ? System.getProperty(SYS_PROP_DB_USER) : 'bonita'),
+                            "db.password"                 : project.hasProperty('db.password') ? project.property(SYS_PROP_DB_URL) : (System.getProperty(SYS_PROP_DB_PASSWORD) ? System.getProperty(SYS_PROP_DB_PASSWORD) : 'bpm'),
+                            "db.server.name"              : connectionSettings.serverName,
+                            "db.server.port"              : connectionSettings.portNumber,
+                            "db.database.name"            : connectionSettings.databaseName
+                    ]
+
+                    if ('oracle' == vendor.name) {
+                        // fix for https://community.oracle.com/message/3701989
+                        // http://www.thezonemanager.com/2015/07/whats-so-special-about-devurandom.html
+                        dbValues.put('java.security.egd', 'file:/dev/./urandom')
+                        // fix for ORA-01882
+                        dbValues.put('user.timezone', 'UTC')
+                    }
+                    //  /!\ warning: do NOT use setSystemProperties, as it would erase existing system properties.
+                    // rather use systemProperties to merge the new ones with the existing ones.
+                    systemProperties(dbValues)
+                }
+            }
+            project.afterEvaluate {
+                databaseTestTask.includes = extension.includes
+            }
+            if (inspectContainer) {
+                databaseTestTask.dependsOn(inspectContainer)
+            }
+            if (removeContainer) {
+                //container should be removed even when there is a failure
+                databaseTestTask.finalizedBy(removeContainer)
+            }
+
+        }
+    }
+}
diff --git a/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DockerDatabasePlugin.groovy b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DockerDatabasePlugin.groovy
new file mode 100644
index 0000000000..418584dffa
--- /dev/null
+++ b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/DockerDatabasePlugin.groovy
@@ -0,0 +1,38 @@
+package org.bonitasoft.engine.gradle.docker
+
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+/**
+ * @author Emmanuel Duchastenier
+ */
+class DockerDatabasePlugin implements Plugin<Project> {
+
+    @Override
+    void apply(Project project) {
+        project.configurations {
+            drivers
+        }
+
+        defineJdbcDriversConfiguration(project)
+
+        def databaseIntegrationTestExt = project.extensions.create("databaseIntegrationTest", DatabasePluginExtension)
+
+        DockerDatabaseContainerTasksCreator.createTasks(project, databaseIntegrationTestExt)
+
+        project.afterEvaluate {
+            if (!databaseIntegrationTestExt.includes) {
+                println "No databaseIntegrationTest.include found. No tests to run!"
+            }
+        }
+    }
+
+    def defineJdbcDriversConfiguration(Project project) {
+        project.dependencies {
+            // the following jdbc drivers are available for integration tests
+            drivers JdbcDriverDependencies.mysql
+            drivers JdbcDriverDependencies.oracle
+            drivers JdbcDriverDependencies.postgres
+            drivers JdbcDriverDependencies.sqlserver
+        }
+    }
+}
diff --git a/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/JdbcDriverDependencies.groovy b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/JdbcDriverDependencies.groovy
new file mode 100644
index 0000000000..f6c9262b31
--- /dev/null
+++ b/community/buildSrc/src/main/groovy/org/bonitasoft/engine/gradle/docker/JdbcDriverDependencies.groovy
@@ -0,0 +1,24 @@
+/**
+ * Copyright (C) 2018 Bonitasoft S.A.
+ * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble
+ * This library is free software; you can redistribute it and/or modify it under the terms
+ * of the GNU Lesser General Public License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU Lesser General Public License for more details.
+ * You should have received a copy of the GNU Lesser General Public License along with this
+ * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
+ * Floor, Boston, MA 02110-1301, USA.
+ **/
+
+package org.bonitasoft.engine.gradle.docker
+
+class JdbcDriverDependencies {
+
+    final static String mysql = 'mysql:mysql-connector-java:5.1.26'
+    final static String oracle = 'com.oracle:ojdbc:6.11.2.0.4.0'
+    final static String postgres = 'org.postgresql:postgresql:9.3-1102-jdbc41'
+    final static String sqlserver = 'com.microsoft.jdbc:sqlserver:6.0.8112.100_41'
+
+}
diff --git a/community/services/bonita-business-data/bonita-business-data-impl/build.gradle b/community/services/bonita-business-data/bonita-business-data-impl/build.gradle
index 8a786d1cc8..09792b3991 100644
--- a/community/services/bonita-business-data/bonita-business-data-impl/build.gradle
+++ b/community/services/bonita-business-data/bonita-business-data-impl/build.gradle
@@ -1,3 +1,5 @@
+apply plugin: 'bonita-docker-database'
+
 group = 'org.bonitasoft.engine.data'
 description = 'Bonita Business Data: Repository Implementation'
 dependencies {
@@ -34,5 +36,18 @@ exclude(module: 'jboss-transaction-api_1.2_spec')
     compileOnly group: 'javax.transaction', name: 'jta', version:'1.1'
   compileOnly project(':engine:bpm:bonita-util:bonita-common-util')
     compileOnly group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.7'
+}
 
+// to run tests on H2:
+task integrationTest(type: Test) {
+    include '**/*Test.class'
 }
+
+// run:
+// ./gradlew mysqlDatabaseTest
+// ./gradlew oracleDatabaseTest
+// ./gradlew postgresDatabaseTest
+// to run tests on specific docker DB:
+databaseIntegrationTest {
+    includes '**/*Test.class'
+}
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 656f2e6098..0edf5843a7 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1 +1 @@
-org.gradle.jvmargs=-Dfile.encoding=UTF-8
\ No newline at end of file
+org.gradle.jvmargs=-Dfile.encoding=UTF-8 -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
\ No newline at end of file
diff --git a/subscription/bonita-integration-tests-sp/bonita-integration-tests-as/bonita-integration-cluster/src/test/java/com/bonitasoft/engine/NodeLauncher.java b/subscription/bonita-integration-tests-sp/bonita-integration-tests-as/bonita-integration-cluster/src/test/java/com/bonitasoft/engine/NodeLauncher.java
index 550992cc2b..0a6d47dae8 100644
--- a/subscription/bonita-integration-tests-sp/bonita-integration-tests-as/bonita-integration-cluster/src/test/java/com/bonitasoft/engine/NodeLauncher.java
+++ b/subscription/bonita-integration-tests-sp/bonita-integration-tests-as/bonita-integration-cluster/src/test/java/com/bonitasoft/engine/NodeLauncher.java
@@ -34,6 +34,7 @@ public class NodeLauncher {
                 .stream()
                 .distinct()
                 .filter(arg -> arg.startsWith("-XX"))
+                .distinct()
                 .collect(Collectors.toList());
         if (!jvmFlags.isEmpty()) {
             System.out.println("Adding flags from source JVM: " + jvmFlags);
diff --git a/subscription/bonita-integration-tests-sp/bonita-integration-tests-local/build.gradle b/subscription/bonita-integration-tests-sp/bonita-integration-tests-local/build.gradle
index 2f3cd304e3..d5b6527b8a 100644
--- a/subscription/bonita-integration-tests-sp/bonita-integration-tests-local/build.gradle
+++ b/subscription/bonita-integration-tests-sp/bonita-integration-tests-local/build.gradle
@@ -1,11 +1,11 @@
 import com.bonitasoft.engine.gradle.LicenseExtractorPlugin
 
+apply plugin: 'bonita-docker-database'
 apply plugin: LicenseExtractorPlugin
 
 group = 'com.bonitasoft.engine.test'
 description = ''
 
-
 dependencies {
     compile project(':subscription:bonita-test-api-sp')
     compile project(':subscription:bpm:bonita-server-sp')
@@ -29,6 +29,11 @@ test {
 task integrationTest(type: Test) {
     include 'com/bonitasoft/engine/LocalIntegrationTestsSP.class'
 }
+
 task slowTest(type: Test) {
     include 'com/bonitasoft/engine/SlowExecutionLocalIntegrationTestsSP.class'
 }
+
+databaseIntegrationTest {
+    include 'com/bonitasoft/engine/SlowExecutionLocalIntegrationTestsSP.class'
+}
\ No newline at end of file
-- 
2.17.1

