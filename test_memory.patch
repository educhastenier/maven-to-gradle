From ac14e9f9cdca54bc95a1c6ecd9aa06beb8fbbe9b Mon Sep 17 00:00:00 2001
From: Baptiste Mesta <baptiste.mesta@bonitasoft.com>
Date: Mon, 16 Jul 2018 16:47:02 +0200
Subject: [PATCH] use JVM flag for memory mngmt in docker

should factorise the code to get jvm options
---
 Jenkinsfile                                       |  6 +++---
 build.gradle                                      | 15 +++++++++++++++
 .../bonita-integration-tests-client/build.gradle  |  1 -
 community/build.gradle                            | 15 ++++++++++++++-
 gradle.properties                                 |  1 +
 5 files changed, 33 insertions(+), 5 deletions(-)
 create mode 100644 gradle.properties

diff --git a/Jenkinsfile b/Jenkinsfile
index 3cd65cc162..e7b7d1375e 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -19,9 +19,9 @@ timestamps {
             }
 
             try {
-                    stage('Build and Test') {
-                     sh './gradlew build iT'
-                }
+                 stage('Build and Test') {
+                     sh './gradlew build iT -Dorg.gradle.jvmargs="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
+                 }
             } finally {
                 junit '**/build/test-results/**/*.xml'
             }
diff --git a/build.gradle b/build.gradle
index f3e7204db4..17b1f3ef96 100644
--- a/build.gradle
+++ b/build.gradle
@@ -39,4 +39,19 @@ subprojects {
             }
         }
     }
+
+    afterEvaluate {
+        tasks.withType(Test) { testTask ->
+            if (testTask.name == "integrationTest" || testTask.name == "slowtest") {
+                def property = project.property('org.gradle.jvmargs')
+                if(property){
+                    jvmArgs property.toString().split(" ")
+                }
+                def sysProperty = System.getProperty("org.gradle.jvmargs")
+                if (sysProperty) {
+                    jvmArgs sysProperty.split(" ")
+                }
+            }
+        }
+    }
 }
diff --git a/community/bonita-integration-tests/bonita-integration-tests-client/build.gradle b/community/bonita-integration-tests/bonita-integration-tests-client/build.gradle
index 935df444f8..3f3624ef3a 100644
--- a/community/bonita-integration-tests/bonita-integration-tests-client/build.gradle
+++ b/community/bonita-integration-tests/bonita-integration-tests-client/build.gradle
@@ -16,7 +16,6 @@ dependencies {
     compile project(':engine:bpm:bonita-client')
     compile project(':engine:bonita-integration-tests:bonita-test-utils:bonita-common-test-utils')
     compile project(':engine:bonita-integration-tests:bonita-test-utils:bonita-client-test-utils')
-<<<<<<< HEAD
     compile 'org.assertj:assertj-core:3.7.0'
     compile 'net.javacrumbs.json-unit:json-unit-fluent:1.25.1'
     compile 'com.github.stefanbirkner:system-rules:1.16.0'
diff --git a/community/build.gradle b/community/build.gradle
index d4e136b511..4cfb7d0b48 100644
--- a/community/build.gradle
+++ b/community/build.gradle
@@ -50,7 +50,20 @@ subprojects {
             }
         }
     }
-
+    afterEvaluate {
+        tasks.withType(Test) { testTask ->
+            if (testTask.name == "integrationTest" || testTask.name == "slowtest") {
+                def property = project.property('org.gradle.jvmargs')
+                if (property) {
+                    jvmArgs property.toString().split(" ")
+                }
+                def sysProperty = System.getProperty("org.gradle.jvmargs")
+                if (sysProperty) {
+                    jvmArgs sysProperty.split(" ")
+                }
+            }
+        }
+    }
     tasks.withType(JavaCompile) {
         options.encoding = 'UTF-8'
     }
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 0000000000..656f2e6098
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1 @@
+org.gradle.jvmargs=-Dfile.encoding=UTF-8
\ No newline at end of file
-- 
2.20.1

